//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e826a16b-2428-4b0e-a41a-fe11e9567f19"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""40962281-876f-4d61-a072-72fd6b69b30b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""e75c4995-0528-4137-8555-d98006f8545d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""f92d3d3d-885d-4d1c-a551-95fb39707bb0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""7a77d127-352b-4ff3-8183-f9bafd2b5b26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SummonBulldozer"",
                    ""type"": ""Button"",
                    ""id"": ""8331992a-804e-413b-a3e8-899041c48802"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SummonPlatform"",
                    ""type"": ""Button"",
                    ""id"": ""c4658b2a-cbd6-4297-8ef2-c975c4d1badc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SummonMagpie"",
                    ""type"": ""Button"",
                    ""id"": ""d6bb3370-cf4f-423c-b682-d65ae3f35eb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SummonReaper"",
                    ""type"": ""Button"",
                    ""id"": ""f11bec0b-e3bb-43f3-aaa9-d020824220d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""53f65c87-dfc3-4bd6-a14a-df3e6b825da2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GameInput"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cba33661-8810-4c6a-ab76-d8f4ea341aa2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GameInput"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b56c948-3963-47a2-b3ff-543db89d0f7f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GameInput"",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1619f518-d201-44a8-a6e8-f7c593d16b48"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GameInput"",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ed1a35e-1a23-488d-b7fe-9f775ce4f259"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GameInput"",
                    ""action"": ""SummonBulldozer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9f53c2c-ff9f-48ca-8981-eb6dc90eb4d5"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GameInput"",
                    ""action"": ""SummonPlatform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afbd05d1-059a-4a0e-90db-c5aba81af63a"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GameInput"",
                    ""action"": ""SummonMagpie"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""786c481a-2847-42cf-867c-d89393596fad"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GameInput"",
                    ""action"": ""SummonReaper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""GameInput"",
            ""bindingGroup"": ""GameInput"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Left = m_Player.FindAction("Left", throwIfNotFound: true);
        m_Player_Right = m_Player.FindAction("Right", throwIfNotFound: true);
        m_Player_Space = m_Player.FindAction("Space", throwIfNotFound: true);
        m_Player_Restart = m_Player.FindAction("Restart", throwIfNotFound: true);
        m_Player_SummonBulldozer = m_Player.FindAction("SummonBulldozer", throwIfNotFound: true);
        m_Player_SummonPlatform = m_Player.FindAction("SummonPlatform", throwIfNotFound: true);
        m_Player_SummonMagpie = m_Player.FindAction("SummonMagpie", throwIfNotFound: true);
        m_Player_SummonReaper = m_Player.FindAction("SummonReaper", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Left;
    private readonly InputAction m_Player_Right;
    private readonly InputAction m_Player_Space;
    private readonly InputAction m_Player_Restart;
    private readonly InputAction m_Player_SummonBulldozer;
    private readonly InputAction m_Player_SummonPlatform;
    private readonly InputAction m_Player_SummonMagpie;
    private readonly InputAction m_Player_SummonReaper;
    public struct PlayerActions
    {
        private @GameInput m_Wrapper;
        public PlayerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_Player_Left;
        public InputAction @Right => m_Wrapper.m_Player_Right;
        public InputAction @Space => m_Wrapper.m_Player_Space;
        public InputAction @Restart => m_Wrapper.m_Player_Restart;
        public InputAction @SummonBulldozer => m_Wrapper.m_Player_SummonBulldozer;
        public InputAction @SummonPlatform => m_Wrapper.m_Player_SummonPlatform;
        public InputAction @SummonMagpie => m_Wrapper.m_Player_SummonMagpie;
        public InputAction @SummonReaper => m_Wrapper.m_Player_SummonReaper;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Space.started += instance.OnSpace;
            @Space.performed += instance.OnSpace;
            @Space.canceled += instance.OnSpace;
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
            @SummonBulldozer.started += instance.OnSummonBulldozer;
            @SummonBulldozer.performed += instance.OnSummonBulldozer;
            @SummonBulldozer.canceled += instance.OnSummonBulldozer;
            @SummonPlatform.started += instance.OnSummonPlatform;
            @SummonPlatform.performed += instance.OnSummonPlatform;
            @SummonPlatform.canceled += instance.OnSummonPlatform;
            @SummonMagpie.started += instance.OnSummonMagpie;
            @SummonMagpie.performed += instance.OnSummonMagpie;
            @SummonMagpie.canceled += instance.OnSummonMagpie;
            @SummonReaper.started += instance.OnSummonReaper;
            @SummonReaper.performed += instance.OnSummonReaper;
            @SummonReaper.canceled += instance.OnSummonReaper;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Space.started -= instance.OnSpace;
            @Space.performed -= instance.OnSpace;
            @Space.canceled -= instance.OnSpace;
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
            @SummonBulldozer.started -= instance.OnSummonBulldozer;
            @SummonBulldozer.performed -= instance.OnSummonBulldozer;
            @SummonBulldozer.canceled -= instance.OnSummonBulldozer;
            @SummonPlatform.started -= instance.OnSummonPlatform;
            @SummonPlatform.performed -= instance.OnSummonPlatform;
            @SummonPlatform.canceled -= instance.OnSummonPlatform;
            @SummonMagpie.started -= instance.OnSummonMagpie;
            @SummonMagpie.performed -= instance.OnSummonMagpie;
            @SummonMagpie.canceled -= instance.OnSummonMagpie;
            @SummonReaper.started -= instance.OnSummonReaper;
            @SummonReaper.performed -= instance.OnSummonReaper;
            @SummonReaper.canceled -= instance.OnSummonReaper;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_GameInputSchemeIndex = -1;
    public InputControlScheme GameInputScheme
    {
        get
        {
            if (m_GameInputSchemeIndex == -1) m_GameInputSchemeIndex = asset.FindControlSchemeIndex("GameInput");
            return asset.controlSchemes[m_GameInputSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnSpace(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnSummonBulldozer(InputAction.CallbackContext context);
        void OnSummonPlatform(InputAction.CallbackContext context);
        void OnSummonMagpie(InputAction.CallbackContext context);
        void OnSummonReaper(InputAction.CallbackContext context);
    }
}
